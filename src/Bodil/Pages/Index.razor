@page "/"

@using BlazorScheduler
@using Bodil.Database.Models
@using Bodil.Services

@inject ReservationService ReservationService
@inject UserService UserService
@inject IDialogService DialogService

<PageTitle>Index</PageTitle>

<Scheduler OnAddingNewAppointment="OnAddingNewAppointment" OnRequestNewData="OnRequestNewData" TodayButtonText="I dag" EnableDragging=false>
    <Appointments>
        @foreach (var reservation in ReservationService.CurrentReservations)
        {
            <Appointment Start="@reservation.Start" End="@reservation.End" Color="@user.Color">
                @reservation.Title
            </Appointment>
        }
    </Appointments>
</Scheduler>

@code {

    User user = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetTestUserAsync();
    }

    async Task OnAddingNewAppointment(DateTime start, DateTime end)
    {
        if (ReservationService.IsReservationAvailable(user.Id, start, end))
        {
            var reservation = new Reservation()
                {
                    Title = user.FullName,
                    Start = start,
                    End = end,
                    UserId = user.Id,
                };
            await ReservationService.AddReservationAsync(reservation);
        }
        else
        {
            await PromtDeleteRevervationAsync(start, end);
        }

    }

    async Task OnRequestNewData(DateTime start, DateTime end)
    { 
        if(!ReservationService.HasRevervationsInInterval(start, end))
        {
            var resevations = await ReservationService.GetReservationsAsync(start, end);
            ReservationService.CurrentReservations.AddRange(resevations);
        }
    }

    async Task PromtDeleteRevervationAsync(DateTime start, DateTime end)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<ReservationDialog>("Revervasjon", options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var reservation = ReservationService.CurrentReservations.Find(r => r.Start >= start && r.End <= end && r.UserId == user.Id);
            if (reservation is not null)
            {
                await ReservationService.RemoveRevervationAsync(reservation);
            }
        }
    }
}
