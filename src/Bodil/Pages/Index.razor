@page "/"

@using BlazorScheduler
@using Bodil.Database.Models
@using Bodil.Services

@inject ReservationService ReservationService
@inject UserService UserService
@inject IDialogService DialogService

<PageTitle>Index</PageTitle>

<Scheduler OnAddingNewAppointment="OnAddingNewAppointment" OnRequestNewData="OnRequestNewData" TodayButtonText="I dag" EnableDragging=false>
    <Appointments>
        @foreach (var reservation in _reservations)
        {
            <Appointment Start="@reservation.Start" End="@reservation.End" Color="@reservation.Color">
                @reservation.Title
            </Appointment>
        }
    </Appointments>
</Scheduler>

@code {
    List<Reservation> _reservations = new() { new Reservation() { Title = "Test", Start = DateTime.UtcNow, End = DateTime.Today.AddDays(1), Color = "aqua" } };

    User user = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetTestUserAsync();
    }

    async Task OnAddingNewAppointment(DateTime start, DateTime end)
    {
        if (IsRevervationAvailable(start, end))
        {
            var reservation = new Reservation()
                {
                    Title = user.FullName,
                    Start = start,
                    End = end,
                    UserId = user.Id,
                    Color = user.RevervationColor
                };
            await AddRevervationAsync(reservation);
        }
        else
        {
            await PromtDeleteRevervationAsync(start, end);
        }

    }

    async Task OnRequestNewData(DateTime start, DateTime end)
    {
        _reservations = await ReservationService.GetReservationsAsync(start, end);
    }

    bool IsRevervationAvailable(DateTime start, DateTime end) =>
        _reservations.Find(r => r.Start >= start && r.End <= end && r.UserId == user.Id) is null;

    async Task AddRevervationAsync(Reservation reservation)
    {
        _reservations.Add(reservation);
        await ReservationService.AddReservationAsync(reservation);
    }

    async Task RemoveReservationAsync(Reservation reservation)
    {
        _reservations.Remove(reservation);
        await ReservationService.RemoveRevervationAsync(reservation);
    }

    async Task PromtDeleteRevervationAsync(DateTime start, DateTime end)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<ReservationDialog>("Revervasjon", options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var reservation = _reservations.Find(r => r.Start >= start && r.End <= end && r.UserId == user.Id);
            if (reservation is not null)
            {
                _reservations.Remove(reservation);
            }
        }
    }
}
