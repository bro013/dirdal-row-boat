@page "/"

@using BlazorScheduler
@using Bodil.Database.Models
@using Bodil.Services;

@inject IReservationService ReservationService
@inject IUserService UserService
@inject IDialogService DialogService

<PageTitle>Index</PageTitle>

<Scheduler OnAddingNewAppointment="OnAddingNewAppointment" OnRequestNewData="OnRequestNewData" TodayButtonText="I dag" EnableDragging=false>
    <Appointments>
        @foreach (var reservation in reservations)
        {
            <Appointment Start="@reservation.Start" End="@reservation.End" Color="@user.Color">
                @reservation.Title
            </Appointment>
        }
    </Appointments>
</Scheduler>

@code {

    User user = new();
    List<Reservation> reservations = new();

    protected override async Task OnInitializedAsync()
    {
        var userId = Guid.Parse("fe108034-9d68-4673-9d6b-c89ebc94a7d0");
        user = await UserService.GetUserAsync(userId);
    }

    async Task OnAddingNewAppointment(DateTime start, DateTime end)
    {
        await FetchNewReservationsAsync(start, end);
        if (IsReservationAvailable(user.Id, start, end))
            await AddNewReservationAsync(start, end);
        else
            await PromtDeleteRevervationAsync(start, end);
    }

    async Task OnRequestNewData(DateTime start, DateTime end) => await FetchNewReservationsAsync(start, end);

    async Task AddNewReservationAsync(DateTime start, DateTime end)
    {
        var reservation = new Reservation()
            {
                Id = Guid.NewGuid(),
                Title = user.FullName,
                Start = start,
                End = end,
                UserId = user.Id,
            };
        await ReservationService.AddReservationAsync(reservation);
        reservations.Add(reservation);
    }

    async Task PromtDeleteRevervationAsync(DateTime start, DateTime end)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<ReservationDialog>("Revervasjon", options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var reservation = FindReservation(user.Id, start, end);
            if (reservation is not null)
            {
                await ReservationService.DeleteRevervationAsync(reservation);
                reservations.Remove(reservation);
            }
        }
    }

    async Task FetchNewReservationsAsync(DateTime start, DateTime end)
    {
        if (!HasRevervationsInInterval(start, end))
        {
            var resevations = await ReservationService.GetReservationsAsync(start, end);
            var newReservations = resevations.Except(reservations);
            reservations.AddRange(newReservations);
        }
    }

    Reservation? FindReservation(Guid userId, DateTime start, DateTime end) =>
        reservations.Find(r => r.Start >= start && r.End <= end && r.UserId == userId);

    bool IsReservationAvailable(Guid userId, DateTime start, DateTime end) =>
        FindReservation(userId, start, end) is null;

    bool HasRevervationsInInterval(DateTime start, DateTime end) =>
        reservations.Where(r => r.Start >= start && r.End <= end).Any();
}
