@page "/"

@attribute [Authorize]

@using BlazorScheduler
@using Bodil.Services;
@using Bodil.Models;
@using Bodil.States;
@using Microsoft.Identity.Web;

@inject IReservationService ReservationService
@inject IUserService UserService
@inject UserState UserState

<PageTitle>Index</PageTitle>
<AuthorizeView Context="userContext">
    <Authorized>
        <Scheduler OnAddingNewAppointment="OnAddingNewAppointment" OnRequestNewData="OnRequestNewData" TodayButtonText="I dag" EnableDragging=false ThemeColor="#00c853">
            <Appointments>
                @foreach (var reservation in reservations)
                {
                    <Appointment Start="@reservation.Start" End="@reservation.End" Color="@GetUserColor(reservation.UserId)">
                        @reservation.Title
                    </Appointment>
                }
            </Appointments>
        </Scheduler>
    </Authorized>
    <NotAuthorized>
        <MudText Typo="Typo.h2">Du er ikke logget inn</MudText>
    </NotAuthorized>
</AuthorizeView>

@code {

    AppUser user = new();
    IEnumerable<AppUser> appUsers = Array.Empty<AppUser>();
    List<Reservation> reservations = new();

    protected override async Task OnInitializedAsync()
    {
        if (!UserState.IsLoggedIn)
            await UserService.LoginAsync();

        await Task.WhenAll(SetAppUsers(), SetUserAsync());
    }

    string GetUserColor(Guid userId) => appUsers.Where(user => user.Id == userId).FirstOrDefault()?.Color ?? "red";

    async Task SetUserAsync() => user = await UserService.GetUserAsync(UserState.UserId);

    async Task SetAppUsers() => appUsers = await UserService.GetAppUsers();

    async Task OnAddingNewAppointment(DateTime start, DateTime end) => await ReservationService.AddReservation(user, start, end);

    async Task OnRequestNewData(DateTime start, DateTime end) => reservations = await ReservationService.GetReservationsAsync(start, end);
}
