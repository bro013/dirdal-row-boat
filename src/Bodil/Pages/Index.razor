@page "/"

@using BlazorScheduler
@using Bodil.Database.Models
@using Bodil.Services

@inject ReservationService ReservationService
@inject UserService UserService
@inject IDialogService DialogService

<PageTitle>Index</PageTitle>

<Scheduler OnAddingNewAppointment="OnAddingNewAppointment" OnRequestNewData="OnRequestNewData" TodayButtonText="I dag" EnableDragging=false>
    <Appointments>
        @foreach (var reservation in ReservationService.Reservations)
        {
            <Appointment Start="@reservation.Start" End="@reservation.End" Color="@user.Color">
                @reservation.Title
            </Appointment>
        }
    </Appointments>
</Scheduler>

@code {

    User user = new();

    protected override async Task OnInitializedAsync()
    {
        var users = await UserService.GetUsersAsync();
        user = users.First();
    }

    async Task OnAddingNewAppointment(DateTime start, DateTime end)
    {
        if (ReservationService.IsReservationAvailable(user.Id, start, end))
            await AddNewReservationAsync(start, end);
        else
            await PromtDeleteRevervationAsync(start, end);
    }

    async Task OnRequestNewData(DateTime start, DateTime end) => await ReservationService.RequestNewReservationsAsync(start, end);

    async Task AddNewReservationAsync(DateTime start, DateTime end)
    {
        var reservation = new Reservation()
            {
                Title = user.FullName,
                Start = start,
                End = end,
                UserId = user.Id,
            };
        await ReservationService.AddReservationAsync(reservation);
    }

    async Task PromtDeleteRevervationAsync(DateTime start, DateTime end)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<ReservationDialog>("Revervasjon", options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var reservation = ReservationService.FindReservation(user.Id, start, end);
            if (reservation is not null)
            {
                await ReservationService.RemoveRevervationAsync(reservation);
            }
        }
    }
}
